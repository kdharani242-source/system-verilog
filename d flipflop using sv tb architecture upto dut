// Code your design here
module dff(d,q,clk,rst);
  input d;
  input clk;
  input rst;
  output reg q;
  always@(posedge clk or negedge rst)
    begin
      if(!rst)
        begin 
          q<=1'b0;
        end
      else 
        begin
          q<=d;
        end
    end
endmodule
interface inter;
  logic d;
  logic clk;
  logic rst;
  logic q;
endinterface

//tb
// Code your testbench here
// or browse Examples
class generator;
  logic d;
  logic rst;
  mailbox mbx;
  task run();
    rst=0;d=0;mbx.put({rst,d});#10;
    rst=0;d=1;mbx.put({rst,d});#10;
    rst=1;d=0;mbx.put({rst,d});#10;
    rst=1;d=1;mbx.put({rst,d});#10;
  endtask
endclass
class driver;
  virtual inter vif;
  logic [1:0] data;
  logic d;
  logic rst;
  mailbox mbx;
  task run();
    repeat (4) begin
      mbx.get(data);
      rst=data[1];
      d=data[0];
      
      vif.d=d;
      vif.rst=rst;
      $monitor("t=%0t rst=%0b d=%0b q=%0b",$time,rst,d,vif.q);
    end
  endtask
endclass
module tb;
  inter inf();
  dff u1(.d(inf.d),.clk(inf.clk),.rst(inf.rst),.q(inf.q));
  generator gen;
  driver div;
  mailbox mbx;
  initial
    begin
      inf.clk=0;
      forever #5 inf.clk=~inf.clk;
    end
  
  initial
    begin
      gen=new();
      div=new();
      mbx=new();
      div.vif=inf;
      gen.mbx=mbx;
      div.mbx=mbx;
      fork
        gen.run();
        div.run();
      join
      $finish;
    end
endmodule
