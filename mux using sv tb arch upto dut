// Code your design here
module mux(a,b,s,y);
  input a,b,s;
  output reg y;
  always@(*)
    begin
      if(s)
        y<=a;
      else
        y<=b;
    end
endmodule
interface inter;
  logic a;
  logic b;
  logic s;
  logic y;
endinterface
//full subtractor
// Code your design here
class generator;
  logic a;
  logic b;
  logic s;
  mailbox mbx;
  task run();
    for(int i=0;i<8;i++) 
      begin
        {s,a,b}=i;mbx.put({s,a,b});#10;
      end
  endtask
endclass
class driver;
  virtual inter vif;
  mailbox mbx;
  logic [2:0]data;
  logic s,a,b;
  task run();
    repeat(8) begin
      mbx.get(data);
      s=data[2];
      a=data[1];
      b=data[0];
      vif.s=s;
      vif.a=a;
      vif.b=b;
      #10;
      $display("s=%0b a=%0b b=%0b y=%0b",s,a,b,vif.y);
    end
  endtask
endclass
module tb;
  inter inf();
   mux u1(.a(inf.a),.b(inf.b),.s(inf.s),.y(inf.y));
  generator gen;
  driver div;
  mailbox mbx;
 
  initial
    begin
      gen=new();
      div=new();
      mbx=new();
      gen.mbx=mbx;
      div.mbx=mbx;
      div.vif=inf;
      fork
        gen.run();
        div.run();
      join
    end
endmodule
    //output
s=0 a=0 b=0 y=0
s=0 a=0 b=1 y=1
s=0 a=1 b=0 y=0
s=0 a=1 b=1 y=1
s=1 a=0 b=0 y=0
s=1 a=0 b=1 y=0
s=1 a=1 b=0 y=1
s=1 a=1 b=1 y=1
